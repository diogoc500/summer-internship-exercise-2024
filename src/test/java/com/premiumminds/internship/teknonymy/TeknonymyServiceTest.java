package com.premiumminds.internship.teknonymy;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.time.LocalDateTime;
import java.time.Month;

import static org.junit.Assert.assertEquals;


@RunWith(JUnit4.class)
public class TeknonymyServiceTest {

    /**
     * The corresponding implementations to test.
     *
     * If you want, you can make others :)
     *
     */
    public TeknonymyServiceTest() {
    }

    @Test
    public void PersonNoChildrenTest() {
        Person person = new Person("John", 'M', null, LocalDateTime.of(1046, 1, 1, 0, 0));
        String result = new TeknonymyService().getTeknonymy(person);
        String expected = "";

        assertEquals(expected, result);
    }

    @Test
    public void PersonOneChildTest() {
        Person person = new Person("John", 'M', new Person[]{
                new Person("Holy", 'F', null, LocalDateTime.of(1046, 1, 1, 0, 0))
        },
                LocalDateTime.of(1046, 1, 1, 0, 0));
        String result = new TeknonymyService().getTeknonymy(person);
        String expected = "father of Holy";

        assertEquals(expected, result);
    }

    // ==================
    // = PERSON GETTERS =
    // ==================

    @Test
    public void LineTreeTest() {
        Person person = getPerson2();
        String result = new TeknonymyService().getTeknonymy(person);
        String expected = "great-great-great-grandmother of Stacey";

        assertEquals(expected, result);
    }

    @Test
    public void BigTreeTest() {
        Person person = getPerson1();
        String result = new TeknonymyService().getTeknonymy(person);
        String expected = "great-grandfather of Charles";

        assertEquals(expected, result);
    }

    @Test
    public void HugeTreeTest() {
        Person person = getPerson3();
        String result = new TeknonymyService().getTeknonymy(person);
        String expected = "great-great-grandfather of Person3";

        assertEquals(expected, result);
    }

    @Test
    public void HugeCompleteTreeTest() {
        // 16 generations, 3 children each
        Person person = completeTreeGenerator(1, 1000);
        String result = new TeknonymyService().getTeknonymy(person);
        String expected = "great-great-great-great-great-great-great-great-great-great-great-great-great-grandmother of Person7174453";

        assertEquals(expected, result);
    }

    private Person getPerson1() {
        /* *
         * John
         * |                \      \
         * Jack             Janice Mark
         * |      \   \            |
         * Joseph Amy Heath        Carol
         *        |                |       \     \     \
         *        Marisa           Charles Allen Clark Lori
         */
        Person joseph = createPerson("Joseph", 'M', 2003, null);
        Person marisa = createPerson("Marisa", 'F', 2004, null);
        Person amy = createPerson("Amy", 'F', 2003, new Person[]{marisa});
        Person heath = createPerson("Heath", 'M', 2005, null);
        Person jack = createPerson("Jack", 'M', 2001, new Person[]{joseph, amy, heath});
        Person janice = createPerson("Janice", 'F', 2002, null);

        Person charles = createPerson("Charles", 'M', 2003, null);
        Person allen = createPerson("Allen", 'M', 2004, null);
        Person clark = createPerson("Clark", 'M', 2004, null);
        Person lori = createPerson("Lori", 'F', 2005, null);

        Person carol = createPerson("Carol", 'F', 2003, new Person[]{charles, allen, clark, lori});

        Person mark = createPerson("Mark", 'M', 2002, new Person[]{carol});

        // Root
        Person john = createPerson("John", 'M', 2000, new Person[]{jack, janice, mark});

        return john;
    }

    private Person getPerson2() {
        // kim -> gregory -> jerry -> gerald -> angela -> stacey
        Person stacey = createPerson("Stacey", 'F', 2005, null);
        Person angela = createPerson("Angela", 'F', 2004, new Person[]{stacey});
        Person gerald = createPerson("Gerald", 'M', 2003, new Person[]{angela});
        Person jerry = createPerson("Jerry", 'M', 2002, new Person[]{gerald});
        Person gregory = createPerson("Gregory", 'M', 2001, new Person[]{jerry});

        // Root
        Person kim = createPerson("Kim", 'F', 2000, new Person[]{gregory});

        return kim;
    }

    private Person getPerson3() {
        /**
         * Tree generated by ChatGPT.
         * Verified by me:
         * - The code generated by ChatGPT does indeed correspond to a tree (connected acyclic graph).
         * - The ASCII tree does correspond to the code below it.
         */

        /**
         * ASCII Representation
         * Root
         * ├── Person1
         * ├── Person2
         * ├── Person21
         * │   ├── Person19
         * │   │   ├── Person15
         * │   │   │   ├── Person3
         * │   │   │   ├── Person4
         * │   │   │   └── Person5
         * │   │   └── Person16
         * │   │       ├── Person6
         * │   │       ├── Person7
         * │   │       └── Person8
         * │   └── Person20
         * │       ├── Person17
         * │       │   ├── Person9
         * │       │   ├── Person10
         * │       │   └── Person11
         * │       └── Person18
         * │           ├── Person12
         * │           ├── Person13
         * │           └── Person14
         * ├── Person22
         * ├── Person23
         * ├── Person24
         * ├── Person39
         * │   ├── Person37
         * │   │   ├── Person25
         * │   │   ├── Person26
         * │   │   └── Person27
         * │   └── Person38
         * │       ├── Person34
         * │       │   ├── Person28
         * │       │   └── Person29
         * │       ├── Person35
         * │       │   ├── Person30
         * │       │   └── Person31
         * │       └── Person36
         * │           ├── Person32
         * │           └── Person33
         * ├── Person40
         * ├── Person41
         * ├── Person42
         * ├── Person43
         * ├── Person44
         * ├── Person45
         * ├── Person46
         * └── Person51
         *     ├── Person47
         *     ├── Person48
         *     ├── Person49
         *     └── Person50
         */

        Person person1 = createPerson("Person1", 'M', 1970, null);
        Person person2 = createPerson("Person2", 'F', 1972, null);

        Person person3 = createPerson("Person3", 'M', 1990, null);
        Person person4 = createPerson("Person4", 'F', 1992, null);
        Person person5 = createPerson("Person5", 'M', 1994, null);

        Person person6 = createPerson("Person6", 'F', 2010, null);
        Person person7 = createPerson("Person7", 'M', 2011, null);
        Person person8 = createPerson("Person8", 'M', 2012, null);

        Person person9 = createPerson("Person9", 'F', 2013, null);
        Person person10 = createPerson("Person10", 'M', 2014, null);
        Person person11 = createPerson("Person11", 'F', 2015, null);

        Person person12 = createPerson("Person12", 'F', 2020, null);
        Person person13 = createPerson("Person13", 'M', 2021, null);
        Person person14 = createPerson("Person14", 'F', 2022, null);

        Person person15 = createPerson("Person15", 'F', 1980, new Person[]{person3, person4, person5});
        Person person16 = createPerson("Person16", 'M', 1982, new Person[]{person6, person7, person8});
        Person person17 = createPerson("Person17", 'F', 1984, new Person[]{person9, person10, person11});
        Person person18 = createPerson("Person18", 'M', 1986, new Person[]{person12, person13, person14});

        Person person19 = createPerson("Person19", 'F', 1960, new Person[]{person15, person16});
        Person person20 = createPerson("Person20", 'M', 1962, new Person[]{person17, person18});

        Person person21 = createPerson("Person21", 'M', 1950, new Person[]{person19, person20});
        Person person22 = createPerson("Person22", 'F', 1952, null);

        Person person23 = createPerson("Person23", 'F', 1975, null);
        Person person24 = createPerson("Person24", 'M', 1977, null);

        Person person25 = createPerson("Person25", 'M', 2000, null);
        Person person26 = createPerson("Person26", 'F', 2002, null);
        Person person27 = createPerson("Person27", 'M', 2004, null);

        Person person28 = createPerson("Person28", 'F', 2025, null);
        Person person29 = createPerson("Person29", 'M', 2026, null);

        Person person30 = createPerson("Person30", 'F', 2030, null);
        Person person31 = createPerson("Person31", 'M', 2031, null);

        Person person32 = createPerson("Person32", 'F', 2040, null);
        Person person33 = createPerson("Person33", 'M', 2041, null);

        Person person34 = createPerson("Person34", 'F', 2005, new Person[]{person28, person29});
        Person person35 = createPerson("Person35", 'M', 2007, new Person[]{person30, person31});
        Person person36 = createPerson("Person36", 'F', 2009, new Person[]{person32, person33});

        Person person37 = createPerson("Person37", 'M', 1995, new Person[]{person25, person26, person27});
        Person person38 = createPerson("Person38", 'F', 1997, new Person[]{person34, person35, person36});

        Person person39 = createPerson("Person39", 'F', 1965, new Person[]{person37, person38});
        Person person40 = createPerson("Person40", 'M', 1967, null);

        Person person41 = createPerson("Person41", 'F', 1985, null);
        Person person42 = createPerson("Person42", 'M', 1987, null);
        Person person43 = createPerson("Person43", 'F', 1989, null);
        Person person44 = createPerson("Person44", 'M', 1991, null);

        Person person45 = createPerson("Person45", 'F', 2000, null);
        Person person46 = createPerson("Person46", 'M', 2002, null);

        Person person47 = createPerson("Person47", 'F', 2015, null);
        Person person48 = createPerson("Person48", 'M', 2017, null);
        Person person49 = createPerson("Person49", 'F', 2019, null);
        Person person50 = createPerson("Person50", 'M', 2021, null);

        Person person51 = createPerson("Person51", 'F', 1990, new Person[]{person47, person48, person49, person50});

        Person root = createPerson("Root", 'M', 1940, new Person[]{person1, person2, person21, person22, person23,
                person24, person39, person40, person41, person42, person43, person44, person45, person46, person51});

        return root;
    }

    /**
     * Creates a complete family tree. Entrance method for recursive method.
     * (n^height-1)/(n-1) - 1 should be <= Integer.MAX_VALUE
     * However, also be careful not to get a 'java.lang.OutOfMemoryError: Java heap space'.
     * The result is expected to be (n^(height-1)-1)/(n-1)
     * @param n how many children does each person have
     * @param height height of the tree. The height of a tree with 1 node (root) is 1.
     * @return root of the tree.
     */
    private static Person completeTreeGenerator(int n, int height) {
        return completeTreeGenerator_rec(0, n, height-1);
    }

    /**
     * Creates a complete family tree.
     * @param num number of the node that is the root.
     * @param n how many children does each person have
     * @param height height of the tree
     * @return root of the tree
     */
    private static Person completeTreeGenerator_rec(int num, int n, int height) {
        if (height <= 0)
            return createPerson("Person" + num, height % 2 == 0 ? 'M' : 'F', num, null);

        Person[] children = new Person[n];
        for (int i = 0; i < n; i++)
            children[i] = completeTreeGenerator_rec(n * num + i + 1, n, height-1);

        return createPerson("Person" + num, height % 2 == 0 ? 'M' : 'F', num, children);
    }

    private static Person createPerson(String name, Character sex, int yearOfBirth, Person[] children) {
        return new Person(name, sex, children, LocalDateTime.of(yearOfBirth, Month.JANUARY, 1, 0, 0));
    }
}